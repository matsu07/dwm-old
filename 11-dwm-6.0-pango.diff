diff -u dwm_original/dwm.c dwm_xft/dwm.c
--- a/dwm.c	2012-01-09 19:07:41.065029408 +0400
+++ b/dwm.c	2012-01-09 19:07:17.705012468 +0400
@@ -36,8 +36,11 @@
 #include <X11/Xlib.h>
 #include <X11/Xproto.h>
 #include <X11/Xutil.h>
+#include <X11/Xft/Xft.h>
+#include <pango/pango.h>
+#include <pango/pangoxft.h>
+#include <pango/pango-font.h>
 #include <fontconfig/fontconfig.h>
-#include <X11/Xft/Xft.h>
 #ifdef XINERAMA
 #include <X11/extensions/Xinerama.h>
 #endif /* XINERAMA */
@@ -49,9 +52,13 @@
                                * MAX(0, MIN((y)+(h),(m)->wy+(m)->wh) - MAX((y),(m)->wy)))
 #define ISVISIBLE(C)            ((C->tags & C->mon->tagset[C->mon->seltags]))
 #define LENGTH(X)               (sizeof X / sizeof X[0])
-#define MAX(A, B)               ((A) > (B) ? (A) : (B))
+#ifndef MAX
+#define MAX(A, B)		((A) > (B) ? (A) : (B))
+#endif
+#ifndef MIN
 #define MIN(A, B)               ((A) < (B) ? (A) : (B))
+#endif
 #define MAXCOLORS				21
 #define MOUSEMASK               (BUTTONMASK|PointerMotionMask)
 #define WIDTH(X)                ((X)->w + 2 * (X)->bw)
 #define HEIGHT(X)               ((X)->h + 2 * (X)->bw)
@@ -123,12 +130,19 @@
 	XftColor colors[MAXCOLORS][ColLast];
 	Drawable drawable;
 	GC gc;
+
+	XftColor  xftnorm[ColLast];
+	XftColor  xftsel[ColLast];
+	XftDraw  *xftdrawable;
+
+	PangoContext *pgc;
+	PangoLayout  *plo;
+	PangoFontDescription *pfd;
+
 	struct {
 		int ascent;
 		int descent;
 		int height;
 		XftFont *xfont;
 	} font;
 } DC; /* draw context */
 
@@ -228,7 +244,7 @@
 static void focusin(XEvent *e);
 static void focusmon(const Arg *arg);
 static void focusstack(const Arg *arg);
 static Atom getatomprop(Client *c, Atom prop);
-static XftColor getcolor(const char *colstr);
+//static XftColor getcolor(const char *colstr);
 static Bool getrootptr(int *x, int *y);
 static long getstate(Window w);
 static Bool gettextprop(Window w, Atom atom, char *text, unsigned int size);
@@ -711,6 +727,7 @@
 			if(dc.drawable != 0)
 				XFreePixmap(dpy, dc.drawable);
 			dc.drawable = XCreatePixmap(dpy, root, sw, bh, DefaultDepth(dpy, screen));
+			XftDrawChange(dc.xftdrawable, dc.drawable);
 			updatebars();
 			for(m = mons; m; m = m->next)
 				resizebarwin(m);
@@ -974,7 +991,7 @@
		return;
	olen = strlen(text);
	h = pad ? (dc.font.ascent + dc.font.descent) : 0;
-	y = dc.y + ((dc.h + dc.font.ascent - dc.font.descent) / 2);
+	y = dc.y;
	x = dc.x + (h / 2);
 	/* shorten text if necessary */
 	for(len = MIN(olen, sizeof buf); len && textnw(text, len) > dc.w - h; len--);
@@ -983,11 +1000,8 @@
 	memcpy(buf, text, len);
 	if(len < olen)
 		for(i = len; i && i > len - 3; buf[--i] = '.');

-	d = XftDrawCreate(dpy, dc.drawable, DefaultVisual(dpy, screen), DefaultColormap(dpy,screen));
-
-	XftDrawStringUtf8(d, (XftColor *) &col[ColFG].pixel, dc.font.xfont, x, y, (XftChar8 *) buf, len);
-	XftDrawDestroy(d);
+	pango_layout_set_text(dc.plo, text, len);
+	pango_xft_render_layout(dc.xftdrawable, (col==dc.norm?dc.xftnorm:dc.xftsel)+(invert?ColBG:ColFG), dc.plo, x * PANGO_SCALE, y * PANGO_SCALE);
 }
 
 void
@@ -1112,13 +1127,13 @@
 }
 
 unsigned long
-getcolor(const char *colstr) {
+getcolor(const char *colstr, XftColor *color) {
-	XftColor color;
+ 	Colormap cmap = DefaultColormap(dpy, screen);
+	Visual *vis = DefaultVisual(dpy, screen);
 
-	if(!XftColorAllocName(dpy, DefaultVisual(dpy, screen), DefaultColormap(dpy, screen), colstr, &color))
+	if(!XftColorAllocName(dpy,vis,cmap,colstr, color))
 		die("error, cannot allocate color '%s'\n", colstr);
-	return color;
+	return color->pixel;
 }
 
 Bool
@@ -1034,35 +1043,19 @@
@@ -1128,35 +1043,19 @@
 
 void
 initfont(const char *fontstr) {
 
-	if(!(dc.font.xfont = XftFontOpenName(dpy,screen,fontstr))
-	&& !(dc.font.xfont = XftFontOpenName(dpy,screen,"fixed")))
-		die("error, cannot load font: '%s'\n", fontstr);
-
-	dc.font.ascent = dc.font.xfont->ascent;
-	dc.font.descent = dc.font.xfont->descent;
+	PangoFontMetrics *metrics;
+	dc.pgc = pango_xft_get_context(dpy, screen);
+	dc.pfd = pango_font_description_from_string(fontstr);
+
+	metrics = pango_context_get_metrics(dc.pgc, dc.pfd, pango_language_from_string(setlocale(LC_CTYPE, "")));
+	dc.font.ascent = pango_font_metrics_get_ascent(metrics) / PANGO_SCALE;
+	dc.font.descent = pango_font_metrics_get_descent(metrics) / PANGO_SCALE;
+
+	pango_font_metrics_unref(metrics);
+
+	dc.plo = pango_layout_new(dc.pgc);
+	pango_layout_set_font_description(dc.plo, dc.pfd);
 	dc.font.height = dc.font.ascent + dc.font.descent;
 }
 
@@ -1611,19 +1604,24 @@
 	cursor[CurNormal] = XCreateFontCursor(dpy, XC_left_ptr);
 	cursor[CurResize] = XCreateFontCursor(dpy, XC_sizing);
 	cursor[CurMove] = XCreateFontCursor(dpy, XC_fleur);
+
 	/* init appearance */
-	dc.norm[ColBorder] = getcolor(normbordercolor);
-	dc.norm[ColBG] = getcolor(normbgcolor);
-	dc.norm[ColFG] = getcolor(normfgcolor);
-	dc.sel[ColBorder] = getcolor(selbordercolor);
-	dc.sel[ColBG] = getcolor(selbgcolor);
-	dc.sel[ColFG] = getcolor(selfgcolor);
+        dc.norm[ColBorder] = getcolor(normbordercolor, dc.xftnorm+ColBorder);
+        dc.norm[ColBG] = getcolor(normbgcolor, dc.xftnorm+ColBG);
+        dc.norm[ColFG] = getcolor(normfgcolor, dc.xftnorm+ColFG);
+        dc.sel[ColBorder] = getcolor(selbordercolor, dc.xftsel+ColBorder);
+        dc.sel[ColBG] = getcolor(selbgcolor, dc.xftsel+ColBG);
+        dc.sel[ColFG] = getcolor(selfgcolor, dc.xftsel+ColFG);
+
 	dc.drawable = XCreatePixmap(dpy, root, DisplayWidth(dpy, screen), bh, DefaultDepth(dpy, screen));
 	dc.gc = XCreateGC(dpy, root, 0, NULL);
 	XSetLineAttributes(dpy, dc.gc, 1, LineSolid, CapButt, JoinMiter);
-	if(!dc.font.set)
-		XSetFont(dpy, dc.gc, dc.font.xfont->fid);
-	/* init bars */
+
+        dc.xftdrawable = XftDrawCreate(dpy, dc.drawable, DefaultVisual(dpy,screen), DefaultColormap(dpy,screen));
+        if(!dc.xftdrawable)
+	        printf("error, cannot create drawable\n");
+
+	/* init bar */
 	updatebars();
 	updatestatus();
 	/* EWMH support per view */
@@ -1692,13 +1690,10 @@
@@ -1692,13 +1690,10 @@
 
 int
 textnw(const char *text, unsigned int len) {
-	// remove non-printing color codes before calculating width
-	char *ptr = (char *) text;
-	unsigned int i, ibuf, lenbuf=len;
-	char buf[len+1];
-
-	for(i=0, ibuf=0; *ptr && i<len; i++, ptr++) {
-		if(*ptr <= NUMCOLORS && *ptr > 0) {
-			if (i < len) { lenbuf--; }
-		} else {
-			buf[ibuf]=*ptr;
-			ibuf++;
-		}
-	}
-	buf[ibuf]=0;
-
-	XGlyphInfo ext;
-	XftTextExtentsUtf8(dpy, dc.font.xfont, (XftChar8 *) buf, lenbuf, &ext);
-	return ext.xOff 
+	PangoRectangle r;
+	pango_layout_set_text(dc.plo, text, len);
+	pango_layout_get_extents(dc.plo, 0, &r);
+	return r.width / PANGO_SCALE;
 }
 
 void
